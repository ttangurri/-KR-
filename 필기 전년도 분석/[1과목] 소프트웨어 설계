2020.06 기출문제

1.

2. 일련번호/

연상코드: 약호. 관계있는 기호

블록코드: (=구분코드) 공통성이 있는 것끼리 (블록으로) 구분

표의 숫자코드: 항목의 성질, 물리적 수치를 적용

순차코드: 일련번호

3. 객체지향/

메소드: 메세지를 받았을 때 수행

클래스: 데이터 추상화

상속성: 부모(상위) 클래스, 자녀(하위) 클래스

메시지: 상호작용 수단, 지시 명령 요구사항

4. 데이터 흐름도 (DFD)-process,flow,store(저장),terminal(단말)

쌩뚱맞은 데이터 사전;;

5. 플랫폼 성능 분석-경과시간, 응답시간, 가용성

서버튜닝은 계속해도 ok

6. uml 확장 모델; stero 타입 객체

<<  >>


7. GoF(gang of four)의 디자인 패턴(생성.구조.행위) 중 행위패턴



8. 자료의 생략 ( )

9. 미들웨어 for 트랜잭션, 데이터 감시 : TP monitor

RPC: remote procedure call 원격 절차 호출

ORB: object request broker 객체간 요청 "지원"

10.UI 설계 원칙

직관성 유효성(사용자목표 달성) 학습성(초보가 쉽게) 유연성(사용자 인터랙션)

11. XP의 5가지 원칙 (익스트림 프로그래밍)

용기(능동적 대처), 의사소통, 피드백, 존중(팀원의 기여)

12. UML 다이어그램 - 구조 다이어그램: (★웬만하면 C,P, 가끔 D,O로 ..역시 구조적)


13. 요구사항 분석 (sw 개발 방법 中)

-조사, 문서화, 제약설정(which is 제약 사항들 확인) // 설계명세서 작성은 요구사항 명세에서 진행한다.

14.럼바우의 객체지향 분석절차

객체-> 동적-> 기능

15.공통 module에 대한 명세 기법 - 한가지로 해석될 수 있도록: 명확성

16. 객체지향기법 - 부분-전체 관계, 부분의 관계: 집단화

17. CASE 주요기능: 그래픽, 다이어그램, 모형, 오류/모순지원, 전단계연결

18. DBMS 분석 시 고려사항: 무결성(가용성) 일관성(상호호환성) 보안(기술지원) 회복 효율(성능) DB확장(구축비용)

19. HIPO (계층 인풋 process opuput)- 하향식 sw 개발

20. ER 다이어그램 사용 : coad와 yourdan(클래스와 객체 '식별'), booch(동적 모델링, 그래픽 표기법) 

​

2020.08 기출문제

1. 요구사항 분석. 

2. GoF(gang of four)의 디자인 패턴 (2)

Factory method= 객체를 :생성:하기 위한 인터페이스를 정의

3. 럼바우 객체지향  (2)

-동적, 기능, 객체 모델링 (정적 x)

4. 애자일 기법


5. 미들웨어 솔루션 (2)

WAS(웹 환경, 동적 콘텐츠 처리. 구현용 미들웨어)

-> 미들웨어 아님.... Web server (저용량 정적 파일)

RPC -로컬처럼 호출하는 미들웨어

ORB - 객체지향 미들웨어

6. UML, 시퀀스 다이어그램: 


+제어 삼각형

7. 정보은닉 in 객체지향 (캡슐화)

8. GoF(gang of four)의 디자인 패턴(3)

9. UI 설계원칙 (2)

10. 코드의 기본기능 

-식별: 성격 식별/구별

-분류: 식별된 데이터끼리 그룹화

-배열: 그룹화된 데이터들을 배열

-표준화: 단일한 형태의 표준화된 표현

11. "협약에 의한 설계"

1) 선행조건 2) 결과조건 3) 불변조건

12. UML 다이어그램 (2) - 행위 다이어그램



(★웬만하면 C,P, 가끔 D,O로 ..역시 구조적)

​


13. 클래스: 하나 이상 유사한 객체들을 묶음

14.

15. 객체지향 sw 설계, ★ 디자인패턴  구성요소: 패턴이름, (문제, 솔루션,) (사례, 결과,) 샘플코드

16. 자료 사전 (data dictionary)

= 자료의 정의

+ 자료의 연결

() 자료의 생략

[] 자료의 선택

{} 자료의 반복

** 자료의 설명(주석)

17.객체지향 설계원칙

SRP (single responsibility principle) 객체는 단 하나의 책임만!

OCP (Open Closed Principle-개방 폐쇄의 원칙) 기능 추가 가능하도록 오픈되어 있어야 (단 , 기존의 코드를 변경 x-closed)

LSP (L리스코프 Substitution Principle) 일반화관계-자식클래스는 부모클래스가 하는 모든 행위가 가능하다

ISP (Interface segregation Principle-인터페이스 분리 원칙) 인터페이스를 클라이언트에 특화되도록 분히시켜야, 사용하지 않는 인터페이스 때문에 영향을 받아서는 x

DIP(Dependency Inversion Principle) 의존관계를 맺을 때 "변화하기 어려운것"에 맺어라!!!!

18.자료 흐름도 (data flow) (2)

19. 20. 인터페이스 요구사항 검토 방법





2020.09 기출문제

1. XP의 기본원리- 선형적x

2. 럼바우 객체지향 (3)


3. CASE기능 (2) 

4. 캡슐화란? -단순화, 재사용성, 오류 파급효과 ↘

5, 객체지향 설계 원칙 (2)

6. 파이프 필터 형태의 소프트웨어 아키텍쳐 - 서브가 입력을 받아 처리하고 다음 서브로 넘김

c.f. 소프트웨어 아키텍쳐


7. 면적/용량/물리 수치를 이용한 코드 ---표의 숫자 코드

8. 디자인 패턴 사용 장 단점 (단점: 절차형 언어와 같이 사용 x)



9. DFD (2)/ 자료흐름 그래프, 버블 그래프

-구조적 분석 가능

-시간 흐름 명확히 표현 xxxxxxxxx (의외로다가,,,,)

-화살표, 원, 직선(linear),사각형 가능

10.

11. UML의 기본 구성요소: ★ 사물/관계/다이어그램

12. 소프트웨어의 상위 설계 ★

-인터페이스 설계와 정의, 아키텍쳐 설계 

13. 자료사전(3)

14. UI 개발시스템 기능 (소스 코드 분석/ 오류 복구는 xxx)

1) 사용자 입력 검증

2) 에러 처리

3) 도움, 프롬프트

15. 요구사항 명세 기법


정형명세: Z, VDM, Pertri-Net(모형기반), CSP,CCs, LoTos(대수적 방법), 명세 간결, 명세와 구현이 일치

비정형명세: FSM, Decision table, E-R 모델링, shor chasrt(SADT), USE CASE(사용자기반 모델링)

16. sw 개발/ 

**요구 분석 과정

-문서화(이후 유지보수에서 활용)

-자료흐름도, 자료 사전 활용

-소단위 명세서(mini-spec)

개발비용이 많이 드는 단계는???? 유지보수

17. 애자일 방법론


18. 미들웨어: 클라이언트-서버 통신

19. GoF(gang of four)의 디자인 패턴(4)

20. sw설계지침 - 모듈간의 결합도는 약할수록, 응집도는 강할수록 good!!!

​

2021.03 기출문제

1.출제오류 있음. (리눅스)

2.





3. 객체지향 개념

캡슐화: 데이터-함수 묶음. 외부와 경계(은닉), 필요한 인터페이스만 드러냄

메세지: 객체의 행위

다형성(poly~): 파생된 행위와 관련성 + 또다른 행위

상속: 하나의 클래스가 다른 클래스로부터 물려받음

4.  GoF(gang of four)의 디자인 패턴(5)

5. 미들웨어 솔루션 (5)

RPC: remote procedure call 원격 절차 호출

ORB: object request broker 객체간 요청 "지원"

6.

7. 객체지향 분석(OOA) 4대 방법론 (Coad-Yourdon, Rumbaugh(OMT), Booch, Jacobson) (2)

-Courd - Yourdon 방법: 객체와 역할을 분류하고 관계를 명확히 표현 (E-R다이어그램 사용)

-럼바우 분석 기법: 구조(정적), 행위(동적), 기능(프로세스 흐름)을 모두 표현하는 균형 잡힌 분석

-Booch 분석 기법: 정적 모델링(클래스 관계) + 동적 모델링(상태 전이, 객체 상호작용)/  미시-거시 프로세스를 모두 사용/ 클래스&객체를 분석 및 식별

-Jacobson 방법: 유스케이스(Use Case)를 중심으로 분석/ 상호작용

8. Fan in - Fan out



따라서 F를 기준으로 Fan in은 (직접)상단에 있는 B,C,D이고 Fan out 은 (직접) 하단에 있는 G, H이다. 

9.

10. 미들웨어의 개념: 서로 다른 소프트웨어(애플리케이션, 시스템, DB 등)가 서로 통신하고 데이터를 주고받을 수 있도록 중간에서 연결해주는 소프트웨어 계층

11. CASE (3)

-모듈화된 설계 유도 -> sw 모듈의 재사용성이 향상

-자동화된 기법-> sw 품질 향상

-유지보수 완전 굿굿굿! 그러나... 사용자 친화적 (easY)이지는 xxxxxxx

12. UML 모델

기능적 모델: Use Case Diagram/ 사용자 측면에서 본 시스템 기능

정적 모델:시스템의 구조적 요소(클래스, 속성, 관계 등)/Class Diagram, Object Diagram 등을 사용

동적 모델:

-Sequence Diagram: 메시지 교환 순서를 시간의 흐름에 따라 표현

-State Diagram: 상태 변화와 상태 전이(Transition)를 표현

-Activity Diagram: 흐름, 조건 분기, 병렬 수행 등을 표현

13.유스케이스:

(유스케이스 구성요소)

-연관: usecase와 actor의 관계

-확장: 기본 usecase 수행시 특별 조건을 만족할 때 수행

-포함: 시스템 기능이 별도의 기능을 포함

-일반화: 상속(?)

-그룹화: 여러개의 usecase를 단순화

14. 요구사항 모델링

​

​
